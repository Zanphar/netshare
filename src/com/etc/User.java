package com.etc;

import com.var.UserVar;
import com.util.Hash;
import com.util.DBConnector;

import java.util.ArrayList;
import java.util.List;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.time.LocalDate;
import java.sql.Date;

/**
 *
 * @author fsaulo
 */
public class User {

	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	Feed feed = null;
	Follower follower = null;

	public User() {

	}

	/**
	 * this function inserts a new user into the database.
	 * it fetch the parameters stored in UserVar class, which
	 * holds all variables of User as well as the getters and
	 * setters methods.
	 */
	public void insertUser(UserVar user) throws SQLException {

		String insertSQL = "insert into users (user_first_name, user_last_name, user_email," +
		"user_hash_email, user_password, user_gender, user_phone, user_status_session," +
		"user_status_email, user_mode, user_age, user_birthday, user_pin, user_full_name) " +
		"values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

		try {

			// @TODO this query shall be gathered using external
			// file in near future.
			con = DBConnector.getConnection();
			ps = con.prepareStatement(insertSQL);
			System.out.println("Setting new user...");
			ps.setString(1, user.getFirstName());
			ps.setString(2, user.getLastName());
			ps.setString(3, user.getEmail());
			ps.setString(4, user.getHashEmail());
			ps.setString(5, user.getPassword());
			ps.setString(6, user.getGender());
			ps.setString(7, user.getPhoneNumber());
			ps.setBoolean(8, user.isStatusSession());
			ps.setBoolean(9, user.isStatusEmail());
			ps.setInt(10, user.getUserMode());
			ps.setInt(11, user.getAge());
			ps.setDate(12, Date.valueOf(user.getBirthday()));
			ps.setString(13, user.getPin());
			ps.setString(14, user.getFirstName() + " " + user.getLastName());
			ps.executeUpdate();

			// calls user constructor
			// not the constructor of class user.
			buildUser(user);

		}

		catch (SQLException ex) {
			Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
		}

		 finally {

		 	if (con != null) con.close();
		 	if (ps != null) ps.close();
		 	if (rs != null) rs.close();

		}
	}

	/**
	 * searches for the id of user associated with hash self generated by
	 * the function genHash located at com.util.Hash
	 * returns an integer.
	 */
	public int selectId(String hash) throws SQLException {

		String selectSQL = "select user_id from users where user_hash_email = ?";
		int id = 0;

		try {

			con = DBConnector.getConnection();
			ps = con.prepareStatement(selectSQL);
			ps.setString(1, hash);
			rs = ps.executeQuery();

			while (rs.next()) {
				id = rs.getInt("user_id");
			}

			ps.close();
			rs.close();
			return id;

		}

		catch (SQLException ex) {
			Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
		}

		finally {

			if (con != null) con.close();
			if (ps != null) ps.close();
			if (rs != null) rs.close();
		}

		return -1;
 	}

	/**
	 * build internal settings for user such as feed
	 * and interaction methods etc.
	 */
	public void buildUser(UserVar user) {

		// spawn feed page for every user we insert into database.
		feed = new Feed();

		// to manage interactions, all user is set to be a follower
		// so it can interact with other users throughout the system.
		follower = new Follower();

		try {

			// feed and follower attributes are set based on user_id
			// this variable is auto incremented in database.
			user.setUserId(selectId(user.getHashEmail()));

			// generates feed and follower attributes for user by id.
			follower.setFollower(user.getUserId(), user.getFirstName());
			feed.spawnFeed(user.getUserId());
			System.out.println("All set");

		}
		catch (SQLException ex) {
			throw new RuntimeException(ex.getMessage());
		}
	}

	/**
	 * this method checks email status, whether is
	 * confirmed or not, returns true if it is confirmed.
	 * @param user_email
	 */
	public boolean checkEmailStatus(String user_email) throws SQLException {

		String selectSQL = "select user_status_email from users where user_email = ?";
		boolean statusEmail = false;

		try {

			con = DBConnector.getConnection();
			ps = con.prepareStatement(selectSQL);
			ps.setString(1, user_email);
			rs = ps.executeQuery();

			while(rs.next()) {
				statusEmail = rs.getBoolean("user_status_email");
			}

			if (statusEmail) {
				return true;
			} else {return false;}
		}
		catch (SQLException ex) {
			Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
		}
		return false;
	}

	/**
	 * this method receives an instance of user
	 * as parameter that holds only email and pin,
	 * it tests if the email is already verified
	 * and verify it if not.
	 * @param user
	 */
	public void verifyEmail(UserVar hold) throws SQLException {

		String selectSQL = "select user_pin, user_email, user_status_email " +
		"from users where user_email = ?";
		String updateSQL = "update users set user_status_email = ? where user_email = ?";
		String hash = null;
		String email = null;
		boolean statusEmail = false;

		try {

			con = DBConnector.getConnection();
			ps = con.prepareStatement(selectSQL);
			ps.setString(1, hold.getEmail());
			rs = ps.executeQuery();

			while (rs.next()) {

				statusEmail = rs.getBoolean("user_status_email");
				hash = rs.getString("user_pin");
				email = rs.getString("user_email");

			}

			if (statusEmail) {
				System.out.println("Email already verified");
				return;
			}

			// @TODO this function shall redirect email message
			// to further email validation.
			while (!statusEmail) {

				System.out.println("Validating email...");

				if (hold.getEmail().equals(email)) {

					System.out.println("Email match database...");

					if (hold.getPin().equals(hash)) {

						statusEmail = true;
						hold.setStatusEmail(statusEmail);
						System.out.println("Email successfully validated.");
						ps = con.prepareStatement(updateSQL);
						ps.setBoolean(1, hold.isStatusEmail());
						ps.setString(2, hold.getEmail());
						ps.executeUpdate();

					}

					else {

						System.out.println("We couldn't validate your email due to security reasons.");
						break;

					}
				}

				else {

					System.out.println("Email not verified");
					break;

				}
			}
		}

		catch (SQLException ex) {
			throw new RuntimeException(ex.getMessage());
		}

		finally {

			if (con != null) con.close();
			if (ps != null) ps.close();
			if (rs != null) rs.close();
		}
	}

	/**
	 * returns the name of user by its id
	 * this method was never initended for
	 * the end-user to access it in no way.
	 */
	public UserVar getNameById(int user_id) throws SQLException {

		String selectSQL = "select user_first_name, user_last_name from users where user_id = ?";

		try {

			con = DBConnector.getConnection();
			ps = con.prepareStatement(selectSQL);
			ps.setInt(1, user_id);
			rs = ps.executeQuery();
			UserVar user = new UserVar();

			while (rs.next()) {

				user.setFirstName(rs.getString("user_first_name"));
				user.setLastName(rs.getString("user_last_name"));
				user.setUserId(user_id);

			}
			return user;
		}

		catch (SQLException ex) {
			throw new RuntimeException(ex.getMessage());
		}

		finally {

			if (con != null) con.close();
			if (ps != null) ps.close();
			if (rs != null) rs.close();

		}
	}

	/**
	 * this method provides a list of every user that
	 * fits in category selected
	 * @param type byName, byId, allUsers
	 * string related with type of search.
	 */
	public List<UserVar> listUser(String searchMode, String criteria, int user_id) throws SQLException {

		String byName = "select user_id, user_first_name, user_last_name, user_mode, user_full_name from users " +
		"where ltrim(rtrim(user_first_name)) = ? or ltrim(rtrim(user_last_name)) = ? or ltrim(rtrim(user_full_name)) = ?";

		String byId = "select user_id, user_first_name, user_last_name, user_mode, user_full_name from " +
		"users where user_id = ?";


		try {

			con = DBConnector.getConnection();

			if (searchMode.equals("byId")) {

				ps = con.prepareStatement(byId);
				ps.setInt(1, user_id);

			} else if (searchMode.equals("byName")) {

				ps = con.prepareStatement(byName);
				for (int i = 1; i < 4; i++) ps.setString(i, criteria);

			} else {

				ps = con.prepareStatement(byName);
				for (int i = 1; i < 4; i++) ps.setString(i, criteria);
			}


			rs = ps.executeQuery();

			// TODO require clearance for searching in
			// all database.
			// if (searchMode.equals("allUsers")) {
			// }
			List<UserVar> profiles = new ArrayList<>();

			while (rs.next()) {

				UserVar user = new UserVar();
				user.setFirstName(rs.getString("user_first_name"));
				user.setLastName(rs.getString("user_last_name"));
				user.setUserId(rs.getInt("user_id"));
				user.setUserMode(rs.getInt("user_mode"));
				user.setFullName(rs.getString("user_full_name"));
				profiles.add(user);

			}
			return profiles;
		}

		catch(SQLException ex) {
				Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
			}

			finally {

				if (con != null) con.close();
				if (rs != null) rs.close();
				if (ps != null) ps.close();

			}
		return null;
	}
}
